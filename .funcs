#!/bin/bash

die() { echo $@; exit -1; }

# Misc.
rand-cd() {
  local DIRS; DIRS=$(find . -maxdepth 1 -type d | sed 's/\(.*\)/"\1"/g')
  local NUM_DIRS=$(echo $DIRS | wc -l)
  [[ $NUM_DIRS == 1 ]] && die "Error: No directories found."
  cd "$(echo $DIRS | xargs -n $NUM_DIRS shuf -n1 -e)"
}
alias rcd='rand-cd'

wget-rec() {
  wget --recursive \
    --page-requisites \
    --html-extension \
    --convert-links \
    --no-parent \
    $*
}

d2h() { # diff2html
  local TMP_FILE=$(mktemp -t hdiff.XXXX)
  diff2html $@ > $TMP_FILE
  chromium $TMP_FILE
}

mkdircd() { mkdir $1; cd $1; }
alias mcd='mkdircd'

# Netjoin - Block until a network connection is obtained.
nj() {
  while true; do
    ping -c 1 8.8.8.8 &> /dev/null && break
    sleep 1
  done
}

# Android.
# TODO - Use ssh if available.
musicToAndroid() {
  { adb devices | grep "device$" &> /dev/null } \
    || { echo "No devices found."; return; }
  if [[ $(uname) == "Linux" ]]; then SORT=sort;
  else SORT=gsort; fi
  while read SONG; do
    echo "Syncing $SONG."
    #TODO - Get relative directory.
    adb push $SONG /sdcard/Music &> /dev/null
    [[ $? != 0 ]] && echo " + Failed."
  done < <(find $* -type f | $SORT -R)
  unset SORT
}
alias m2a='musicToAndroid'

# Docker.
docker-clean() {
  docker rm $(docker ps -a -q)
  docker rmi $(docker images -q)
}

docker-zsh() {
  local TAG=$1
  docker run -v /tmp:/host_tmp:rw -i -t $TAG /bin/zsh
}

# Thread functions.
ps-threads() { ps -C $1 -L -opsr,pid,ppid,lwp,state }
watch-threads() { watch -n 1 ps -C $1 -L -opsr,pid,ppid,lwp,state }

# Allow crontab in dotfiles.
[ -z "${CRONTABCMD+x}" ] && export CRONTABCMD=$(which crontab)
[ -z "${CRONTABFILE+x}" ] && export CRONTABFILE=$HOME/.crontab.$HOST
crontab() {
  if [[ $@ == "-e" ]]; then vim $CRONTABFILE && $CRONTABCMD $CRONTABFILE
  else $CRONTABCMD $@; fi
}

# Infinitely loop commands.
inf() {
  while true; do
    zsh -ci "source $HOME/.zshrc; $* ;"
    [[ $? == 0 ]] || return
  done;
}

memo() {
  echo "$*" | mail -n -s "$*" bamos@cmu.edu
}

lapack-install() {
  wget http://www.netlib.org/lapack/lapack-3.5.0.tgz -O /tmp/lapack.tgz
  tar xvfz /tmp/lapack.tgz -C ~
  rm -f /tmp/lapack.tgz
  cd ~/lapack-3.5.0
  cp make.inc{.example,}
  make -j8 lapacklib blaslib
  ln -s $PWD/librefblas.a libblas.a
}

function stopwatch(){
  case $(uname) in
    "Linux") DATE=date ;;
    "Darwin") DATE=gdate ;;
  esac
  local BEGIN=`$DATE +%s`
  while true; do
    echo -ne "$($DATE -u --date @$((`$DATE +%s` - $BEGIN)) +%H:%M:%S)\r";
  done
}

# https://github.com/matthewmccullough/scripts/blob/master/git-finddirty
git-dirty() {
  OLDIFS=$IFS; IFS=$'\n'

  for gitprojpath in `find . -type d -name .git|sort|sed "s/\/\.git//"`; do
    pushd . >/dev/null
    cd $gitprojpath
    isdirty=$(git status -s | grep "^.*")
    if [ -n "$isdirty" ]; then
      echo "DIRTY:" $gitprojpath
    fi
    popd >/dev/null
  done
  IFS=$OLDIFS
}

sys-find() {
  find / -name $@ 2>/dev/null
}


dump-packages() {
  yaourt -Qe | cut -d ' ' -f 1 | sed 's/^.*\///'
}
