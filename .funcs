#!/bin/bash

# Misc.
rand-cd() {
  DIRS=$(find . -maxdepth 1 -type d | sed 's/\(.*\)/"\1"/g')
  NUM_DIRS=$(echo $DIRS | wc -l)
  [[ $NUM_DIRS == 1 ]] && echo "Warning: No directories found."
  cd "$(echo $DIRS | xargs -n $NUM_DIRS shuf -n1 -e)"
  unset DIRS NUM_DIRS
}

wget-rec() {
  wget --recursive \
    --page-requisites \
    --html-extension \
    --convert-links \
    --no-parent \
    $*
}

calc() { echo "scale=10; $@" | bc }
mkdircd() { mkdir $1; cd $1; }

# Netjoin - Block until a network connection is obtained.
nj() {
  while true; do
    ping -c 1 8.8.8.8 &> /dev/null && break
    sleep 1
  done
}

# Music.
play-rand-dir() {
  DIRS=$(find . -maxdepth 1 -type d | sed 's/\(.*\)/"\1"/g')
  NUM_DIRS=$(echo $DIRS | wc -l)
  [[ $NUM_DIRS == 1 ]] && echo "Warning: No directories found."
  cd "$(echo $DIRS | xargs -n $NUM_DIRS shuf -n1 -e)"
  pd
  cd ..
  unset DIRS NUM_DIRS
}

# Android.
musicToAndroid() {
  { adb devices | grep "device$" &> /dev/null } \
    || { echo "No devices found."; return; }
  while read SONG; do
    echo "Syncing $SONG."
    adb push $SONG /sdcard/Music &> /dev/null
    [[ $? != 0 ]] && echo " + Failed."
  done < <(find $* -type f | sort -R)
}

syncepub() {
  { adb devices | grep "device$" &> /dev/null } \
    || { echo "No devices found."; return; }
  adb shell '[[ -d /sdcard/eBooks ]] || mkdir /sdcard/eBooks'
  while read BOOK; do
    echo "Syncing $BOOK."
    adb push $BOOK /sdcard/eBooks/ &> /dev/null
    [[ $? != 0 ]] && echo " + Failed."
  done < <(find $* -name '*.epub')
}

# Docker.
docker-clean() {
  docker rm $(docker ps -a -q)
  docker rmi $(docker images -q)
}

docker-zsh() {
  local TAG=$1
  docker run -v /tmp:/host_tmp:rw -i -t $TAG /bin/zsh
}

# Thread functions.
ps-threads() { ps -C $1 -L -opsr,pid,ppid,lwp,state }
watch-threads() { watch -n 1 ps -C $1 -L -opsr,pid,ppid,lwp,state }

# Allow crontab in dotfiles.
if test -z $CRONTABCMD; then
  export CRONTABCMD=$(which crontab)
  export CRONTABFILE=$HOME/.crontab.$HOST
  crontab() {
    if [[ $@ == "-e" ]]; then; vim $CRONTABFILE && $CRONTABCMD $CRONTABFILE
    else; $CRONTABCMD $@; fi
  }
  $CRONTABCMD $CRONTABFILE
fi

# Infinitely loop a set of commands.
inf() {
  while true; do
    zsh -ci "source $HOME/.zshrc; $* ;"
    [[ $? == 0 ]] || return
  done;
}

pathadd() {
  if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
    PATH="${PATH:+"$PATH:"}$1"
  fi
}
